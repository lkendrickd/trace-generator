# =======================================================================================
# API GATEWAY SCENARIO - Complex authentication & authorization flow
# Demonstrates: Deep call stack, variable context sharing, realistic error rates
# =======================================================================================

- name: "API Gateway - Consistent User Flow"
  weight: 20
  vars:
    user_id: "{{random.int(1000, 9999)}}"
    session_id: "sess-{{random.uuid}}"
    client_ip: "{{random.ipv4}}"
  root_span:
    service: "api-gateway"
    operation: "GET /api/v1/users/{{user_id}}"
    kind: "SERVER"
    delay_ms: [1, 5]                # Very fast gateway response
    attributes:
      http.method: "GET"
      http.target: "/api/v1/users/{{user_id}}"
      http.client_ip: "{{client_ip}}"
      http.user_agent: "{{random.user_agent}}"
      user.id: "{{user_id}}"
      session.id: "{{session_id}}"
    error_conditions:
      - probability: 2              # 2% upstream timeouts
        type: "UpstreamTimeout"
        message: "Request timed out waiting for an upstream service."
      - probability: 1              # 1% bad requests
        type: "BadRequest"
        message: "Malformed request received by API Gateway."
    calls:
      # Authentication verification with potential failures
      - service: "auth-service"
        operation: "verify_token"
        kind: "CLIENT"
        delay_ms: [10, 30]           # Fast auth check
        attributes:
          rpc.system: "grpc"
          rpc.service: "AuthService"
          auth.client_ip: "{{parent.attributes.http.client_ip}}"
          auth.session_id: "{{parent.attributes.session.id}}"
        error_conditions:
          - probability: 4          # 4% auth failures (common)
            type: "AuthenticationFailed"
            message: "Invalid or expired session token provided."
          - probability: 1          # 1% service unavailable
            type: "ServiceUnavailable"
            message: "Auth service is currently unavailable."
        calls:
          # Deep authorization chain - demonstrates nested calls
          - service: "identity-service"
            operation: "get_user_roles"
            kind: "CLIENT"
            delay_ms: [10, 20]       # Fast role lookup
            attributes:
              user.id: "{{parent.attributes.auth.session_id}}"
            error_conditions:
              - probability: 2      # 2% role fetch failures
                type: "RoleFetchFailed"
                message: "Failed to fetch user roles."
            calls:
              - service: "catalog-service"
                operation: "fetch_role_permissions"
                kind: "CLIENT"
                delay_ms: [10, 20]
                attributes:
                  role.id: "{{parent.attributes.user.id}}"
                error_conditions:
                  - probability: 1
                    type: "PermissionFetchFailed"
                    message: "Failed to fetch permissions for role."
                calls:
                  - service: "resource-service"
                    operation: "check_resource_access"
                    kind: "CLIENT"
                    delay_ms: [10, 20]
                    attributes:
                      resource.id: "res-{{random.int(1,100)}}"
                    error_conditions:
                      - probability: 1
                        type: "ResourceAccessCheckFailed"
                        message: "Resource access check failed."
                    calls:
                      - service: "proc-service"
                        operation: "audit_access_attempt"
                        kind: "CLIENT"
                        delay_ms: [10, 20]
                        attributes:
                          audit.type: "access_attempt"
                        error_conditions:
                          - probability: 1
                            type: "AuditLogFailed"
                            message: "Failed to log access attempt."
                        calls:
                          - service: "notification-service"
                            operation: "send_audit_alert"
                            kind: "CLIENT"
                            delay_ms: [10, 20]
                            attributes:
                              alert.type: "audit"
                            error_conditions:
                              - probability: 1
                                type: "AlertSendFailed"
                                message: "Failed to send audit alert."
                            calls:
                              - service: "analytics-service"
                                operation: "record_security_event"
                                kind: "CLIENT"
                                delay_ms: [10, 20]
                                attributes:
                                  event.type: "security"
                                error_conditions:
                                  - probability: 1
                                    type: "SecurityEventRecordFailed"
                                    message: "Failed to record security event."
                                calls:
                                  - service: "config-service"
                                    operation: "fetch_security_policies"
                                    kind: "CLIENT"
                                    delay_ms: [10, 20]
                                    attributes:
                                      policy.type: "security"
                                    error_conditions:
                                      - probability: 1
                                        type: "PolicyFetchFailed"
                                        message: "Failed to fetch security policies."
                                    calls:
                                      - service: "order-service"
                                        operation: "log_policy_usage"
                                        kind: "CLIENT"
                                        delay_ms: [10, 20]
                                        attributes:
                                          log.type: "policy_usage"
                                        error_conditions:
                                          - probability: 1
                                            type: "PolicyLogFailed"
                                            message: "Failed to log policy usage."
                                        calls:
                                          - service: "tempo"
                                            operation: "trace_policy_decision"
                                            kind: "CLIENT"
                                            delay_ms: [10, 20]
                                            attributes:
                                              trace.type: "policy_decision"
                                            error_conditions:
                                              - probability: 1
                                                type: "TracePolicyDecisionFailed"
                                                message: "Failed to trace policy decision."
      
      # User profile retrieval - parallel to auth
      - service: "identity-service"
        operation: "get_user_profile"
        kind: "CLIENT"
        delay_ms: [20, 50]           # Moderate profile fetch time
        attributes:
          rpc.system: "grpc"
          rpc.service: "IdentityService"
          user.id: "{{parent.attributes.user.id}}"
        error_conditions:
          - probability: 3          # 3% profile not found
            type: "ProfileNotFound"
            message: "User profile does not exist for the given ID."
          - probability: 1          # 1% service overload
            type: "ServiceOverloaded"
            message: "Identity service is overloaded."
        calls:
          # Database query with realistic timing and errors
          - service: "identity-service"
            operation: "db_query_user"
            kind: "CLIENT"
            delay_ms: [20, 80]       # Database query timing
            attributes:
              db.system: "postgresql"
              db.statement: "SELECT * FROM users WHERE id = ?"
            error_conditions:
              - probability: 3      # 3% database timeouts
                type: "DatabaseTimeout"
                message: "Query timed out while fetching user profile."
              - probability: 1      # 1% connection issues
                type: "ConnectionRefused"
                message: "Database connection refused."
          
          # Security notification
          - service: "notification-service"
            operation: "send_profile_access_alert"
            kind: "CLIENT"
            delay_ms: [10, 20]       # Fast notification
            attributes:
              notification.type: "security"
              user.id: "{{parent.attributes.user.id}}"
            error_conditions:
              - probability: 1      # 1% notification failures
                type: "NotificationFailed"
                message: "Failed to send profile access alert."
